stages:
  - build
  - deploy
  - test

variables:
  APP_DIR: "/home/admin/app"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  DOCKER_IMAGE_PROD: phuulia/morningnews-frontend-lacapsule
  DOCKER_IMAGE_PREPROD: phuulia/morningnews-frontend-lacapsule
  TAG: $CI_COMMIT_SHORT_SHA
  PREPRODTAG: preprod-$CI_COMMIT_SHORT_SHA


before_script:
  - echo -e "$ec2_ssh_key" > deploy_key && chmod 600 deploy_key
  - apt-get update && apt-get install -y docker.io
  - echo $tokendocker | docker login -u $logindocker --password-stdin


build_prod: 
  stage: build
  script:
    - echo "$env" > .env
    - docker build -t $DOCKER_IMAGE_PROD:$TAG -t $DOCKER_IMAGE_PROD:latest .
    - docker push $DOCKER_IMAGE_PROD:$TAG
    - docker push $DOCKER_IMAGE_PROD:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "production"

build_preprod: 
  stage: build
  script:
    - echo "$env" > .env
    - docker build -t $DOCKER_IMAGE_PREPROD:$PREPRODTAG .
    - docker push $DOCKER_IMAGE_PREPROD:$PREPRODTAG
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - shell

deploy_preprod:
  stage: deploy
  script:
    - echo "Deploiements de l'application sur l'instance de preprod"
    - echo "PREPRODTAG=${PREPRODTAG}"
    - yq eval '.services.app.image = "${DOCKER_IMAGE_PREPROD}:${PREPRODTAG}"' -i docker-compose.yml
    - rsync -avz -v --progress -e "ssh -vvv -i deploy_key" docker-compose.yml admin@ec2-13-38-84-26.eu-west-3.compute.amazonaws.com:$APP_DIR
    - ssh -v -i deploy_key $ec2_user@$ec2_ip_preprod <<EOF
        cd $APP_DIR
        docker-compose pull
        docker-compose down
        docker-compose up -d --pull always
      EOF
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - shell


deploy_prod:
  stage: deploy
  script:
    - echo "Deploiement de l'application sur l'instance de production"
    - " sed -i 's|image: .*|image: ${DOCKER_IMAGE_PROD:latest}|' docker-compose.yml "
    - rsync -avz -e "ssh -i deploy_key" docker-compose.yml .env $ec2_user@$ec2_ip:$APP_DIR
    - ssh -i deploy_key $ec2_user@$ec2_ip <<EOF
        cd $APP_DIR
        docker-compose down
        docker-compose up -d --pull always
      EOF
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  tags:
    - runner

test_cypress:
  stage: test
  image: 
    name: cypress/browsers:latest
    entrypoint: [""]
  before_script:
  - echo "Installation des dÃ©pendances"
  - npm install
  - npm run build
  - npm install cypress --save-dev
  - npm start &
  script:
    - echo "Lancement des tests Cypress"
    - npx cypress run --headless --config-file cypress.config.js --browser electron --spec "cypress/e2e/testfront.cy.js"
  rules:
    - if: $CI_COMMIT_BRANCH == "devloppeur"

test_sonarcloud:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "Sonar Scanner en cours"
    - sonar-scanner -Dsonar.branch.name=$CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_BRANCH == "devloppeur"


